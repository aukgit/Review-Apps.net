<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;
using WeReviewApp.Controllers;
//using DevTrends.MvcDonutCaching;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName =ModelMetadata.PrimaryKeys[0].TypeName; //GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        //bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
        bindAttribute = String.Empty;

    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    public class <#= ControllerName #> : GenericController<<#= ContextTypeName #>> {

		#region Developer Comments - Alim Ul karim
        /*
         *  Generated by Alim Ul Karim on behalf of Developers Organism.
         *  Find us developers-organism.com
         *  https://fb.com/DevelopersOrganism
         *  mailto:alim@developers-organism.com	
         *  Google 'https://www.google.com.bd/search?q=Alim-ul-karim'
         *  First Written : 23 March 2014
         *  Modified      : 03 March 2015
         * * */
		#endregion

		#region Constants and variables

		const string DeletedError = "Sorry for the inconvenience, last record is not removed. Please be in touch with admin.";
		const string DeletedSaved = "Removed successfully.";
		const string EditedSaved = "Modified successfully.";
		const string EditedError = "Sorry for the inconvenience, transaction is failed to save into the database. Please be in touch with admin.";
		const string CreatedError = "Sorry for the inconvenience, couldn't create the last transaction record.";
		const string CreatedSaved = "Transaction is successfully added to the database.";
		const string ControllerName = "<#= ControllerRootName #>";
		///Constant value for where the controller is actually visible.
		const string ControllerVisibleUrl = "/<#= ControllerRootName #>/"; //Please change as per your area changing.
        const string CurrentControllerRemoveOutputCacheUrl = "/Partials/Get<#= ModelTypeName #>ID";
        const string DynamicLoadPartialController = "/Partials/";
        bool DropDownDynamic = true;
		#endregion

		#region Enums

		internal enum ViewStates {
            Index,
            Create,
            CreatePostBefore,
            CreatePostAfter,
            Edit,
            EditPostBefore,
            EditPostAfter,
            Details,
            Delete,
            DeletePost
        }

		#endregion

		#region Constructors
		
		public <#= ControllerName #>(): base(true){
			ViewBag.controller = ControllerName;
            ViewBag.visibleUrl = ControllerVisibleUrl;
            ViewBag.dropDownDynamic = DropDownDynamic;
            ViewBag.dynamicLoadPartialController = DynamicLoadPartialController;
		} 

		#endregion
		
		#region View tapping
		/// <summary>
        /// Always tap once before going into the view.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="<#= ModelVariable #>">Gives the model if it is a editing state or creating posting state or when deleting.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
		bool ViewTapping(ViewStates view, <#= ModelTypeName #> <#= ModelVariable #> = null, bool entityValidState = true){
			switch (view){
				case ViewStates.Index:
					break;
				case ViewStates.Create:
					break;
				case ViewStates.CreatePostBefore: // before saving it
					break;
                case ViewStates.CreatePostAfter: // after saving
					break;
				case ViewStates.Edit:
					break;
				case ViewStates.Details:
					break;
				case ViewStates.EditPostBefore: // before saving it
					break;
                case ViewStates.EditPostAfter: // after saving
					break;
				case ViewStates.Delete:
					break;
			}
			return true;
		}
		#endregion

		#region Save database common method

		/// <summary>
        /// Better approach to save things into database(than db.SaveChanges()) for this controller.
        /// </summary>
        /// <param name="view">Say the view state, where it is calling from.</param>
        /// <param name="<#= ModelVariable #>">Your model information to send in email to developer when failed to save.</param>
        /// <returns>If successfully saved returns true or else false.</returns>
		bool SaveDatabase(ViewStates view, <#= ModelTypeName #> <#= ModelVariable #> = null){
			// working those at HttpPost time.
			switch (view){
				case ViewStates.Create:
					break;
				case ViewStates.Edit:
					break;
				case ViewStates.Delete:
					break;
			}

			try	{                
				var changes = db.SaveChanges(<#= ModelVariable #>);
				if(changes > 0){
                    RemoveOutputCacheOnIndex();
                    RemoveOutputCache(CurrentControllerRemoveOutputCacheUrl);
					return true;
				}
			} catch (Exception ex){
				 throw new Exception("Message : " + ex.Message.ToString() + " Inner Message : " + ex.InnerException.Message.ToString());
			}
			return false;
		}
		#endregion

		#region DropDowns Generate

        #region <#= ControllerName #> : DropDowns to paste into the partial
            
<#  if(relatedProperties.Values != null && relatedProperties.Values.Count() > 0) { 
      foreach (var property in relatedProperties.Values) { #>
            // [DonutOutputCache(CacheProfile = "YearNoParam")]
            public JsonResult Get<#= property.ForeignKeyPropertyNames[0] #>() {
                var data = db.<#= property.EntitySetName #>.Select(n => new {id = n.<#= property.PrimaryKeyNames[0] #>, display = n.<#= property.DisplayPropertyName #>}).ToList();
                return Json(data, JsonRequestBehavior.AllowGet);
            }
      
<#      } 
    } #>
        #endregion

		public void GetDropDowns(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #> = null){
<#  if(relatedProperties.Values != null && relatedProperties.Values.Count() > 0) { #>
			if(<#= ModelVariable #> != null){
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
			} else {			
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
			}
<# } #>			
		}

		public void GetDropDowns(<#= primaryKeyNullableTypeName #> id){			
<#  if(relatedProperties.Values != null && relatedProperties.Values.Count() > 0) { #>
<# foreach (var property in relatedProperties.Values) { #>
				ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(db.<#= property.EntitySetName #>.ToList(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
<# } #>
		}
		#endregion

		#region Index
        [OutputCache(CacheProfile = "Year")]
<# if (UseAsync) { #>
        public async Task<ActionResult> Index() {
<# } else { #>
        public ActionResult Index() { 
<# } #>
        
<#  var includeExpressions = "";
        includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var <#= entitySetVar #> = db.<#= entitySetName #><#= includeExpressions #>;
			bool viewOf = ViewTapping(ViewStates.Index);
<#		if (UseAsync) { #>
            return View(await <#= entitySetVar #>.ToListAsync());
<#		} else { #>
            return View(<#= entitySetVar #>.ToList());
<#		} #>
<# } else { #>
			bool viewOf = ViewTapping(ViewStates.Index);
<#		if (UseAsync) { #>
            return View(await db.<#= entitySetName #><#= includeExpressions #>.ToListAsync());
<#		} else { #>
            return View(db.<#= entitySetName #><#= includeExpressions #>.ToList());
<#		} #>
<# } #>
        }
		#endregion

		#region Index Find - Commented
		/*
        [OutputCache(CacheProfile = "Year")]
<# if (UseAsync) { #>
        public async Task<ActionResult> Index(<#= primaryKeyNullableTypeName #> id) {
<# } else { #>
        public ActionResult Index(<#= primaryKeyNullableTypeName #> id) {
<# } #>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var <#= entitySetVar #> = db.<#= entitySetName #><#= includeExpressions #>.Where(n=> n. == id);
			bool viewOf = ViewTapping(ViewStates.Index);
<#		if (UseAsync) { #>
            return View(await <#= entitySetVar #>.ToListAsync());
<#		} else { #>
            return View(<#= entitySetVar #>.ToList());
<#		} #>
<# } else { #>
			bool viewOf = ViewTapping(ViewStates.Index);
<#		if (UseAsync) { #>
            return View(await db.<#= entitySetName #><#= includeExpressions #>.Where(n=> n. == id).ToListAsync());
<#		} else { #>
            return View(db.<#= entitySetName #><#= includeExpressions #>.Where(n=> n. == id).ToList());
<#		} #>
<# } #>
        }
		*/
		#endregion

		#region Details
<# if (UseAsync) { #>
        public async Task<ActionResult> Details(<#= primaryKeyNullableTypeName #> id) {
<# } else { #>
        public ActionResult Details(<#= primaryKeyNullableTypeName #> id) {
<# } #>        
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            var <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
			bool viewOf = ViewTapping(ViewStates.Details, <#= ModelVariable #>);
            return View(<#= ModelVariable #>);
        }
		#endregion

		#region Create or Add
        public ActionResult Create() {        
			if(DropDownDynamic == false){
                GetDropDowns();
            }
			bool viewOf = ViewTapping(ViewStates.Create);
            return View();
        }

		/*
		public ActionResult Create(<#= primaryKeyNullableTypeName #> id) {        
			if(DropDownDynamic == false){
                GetDropDowns(id);// Generate hidden.
            }
			bool viewOf = ViewTapping(ViewStates.Create);
            return View();
        }
		*/

        [HttpPost]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>) {
<# } else { #>
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>) {
<# } #>
			bool viewOf = ViewTapping(ViewStates.CreatePostBefore, <#= ModelVariable #>);
			if(DropDownDynamic == false){
                GetDropDowns(<#= ModelVariable #>);
            }
            if (ModelState.IsValid) {            
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
                db.<#= entitySetName #>.Add(<#= ModelVariable #>);
<# if (UseAsync) {#>
                await db.SaveChangesAsync();
<# } else { #>
                bool state = SaveDatabase(ViewStates.Create, <#= ModelVariable #>);
				if (state) {			
					AppVar.SetSavedStatus(ViewBag, CreatedSaved); // Saved Successfully.
				} else {					
					AppVar.SetErrorStatus(ViewBag, CreatedError); // Failed to save
				}
<# } #>				
                viewOf = ViewTapping(ViewStates.CreatePostAfter, <#= ModelVariable #>,state);
                return View(<#= ModelVariable #>);
            }
            viewOf = ViewTapping(ViewStates.CreatePostAfter, <#= ModelVariable #>, false);			
			AppVar.SetErrorStatus(ViewBag, CreatedError); // record is not valid for creation
            return View(<#= ModelVariable #>);
        }
		#endregion

        #region Edit or modify record
<# if (UseAsync) { #>
        public async Task<ActionResult> Edit(<#= primaryKeyNullableTypeName #> id) {
<# } else { #>
        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id) {
<# } #>        
            if (id == null) {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
<# if (UseAsync) { #>
            var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            var <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
			bool viewOf = ViewTapping(ViewStates.Edit, <#= ModelVariable #>);
			if(DropDownDynamic == false){
                GetDropDowns(<#= ModelVariable #>); // Generating drop downs
            }
            return View(<#= ModelVariable #>);
        }

<# if (IsOverpostingProtectionRequired) {
    foreach (var line in OverpostingWarningMessage.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)) { 
#>        
<# } } #>
        [HttpPost]
        [ValidateAntiForgeryToken]
<# if (UseAsync) { #>
        public async Task<ActionResult> Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>) {
<# } else { #>
        public ActionResult Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>) {
<# } #>
			bool viewOf = ViewTapping(ViewStates.EditPostBefore, <#= ModelVariable #>);
            if (ModelState.IsValid)
            {
                db.Entry(<#= ModelVariable #>).State = EntityState.Modified;
<# if (UseAsync) { #>
                await db.SaveChangesAsync();
<# } else { #>
                bool state = SaveDatabase(ViewStates.Edit, <#= ModelVariable #>);
				if (state) {
                    AppVar.SetSavedStatus(ViewBag, EditedSaved); // Saved Successfully.
				} else {					
					AppVar.SetErrorStatus(ViewBag, EditedError); // Failed to Save
				}
<# } #>				
                viewOf = ViewTapping(ViewStates.EditPostAfter, <#= ModelVariable #> , state);
                return RedirectToAction("Index");
            }
            viewOf = ViewTapping(ViewStates.EditPostAfter, <#= ModelVariable #> , false);
        	if(DropDownDynamic == false){
                GetDropDowns(<#= ModelVariable #>); // Generating drop downs
            }
            AppVar.SetErrorStatus(ViewBag, EditedError); // record not valid for save
            return View(<#= ModelVariable #>);
        }
		#endregion

		#region Delete or remove record

		
<# if (UseAsync) { #>
        public async Task<ActionResult> Delete(<#= primaryKeyShortTypeName #> id) {
<# } else { #>
        public ActionResult Delete(<#= primaryKeyShortTypeName #> id) {
<# } #>        
<# if (UseAsync) { #>
            var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            var <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            bool viewOf = ViewTapping(ViewStates.Delete, <#= ModelVariable #>);
			return View(<#= ModelVariable #>);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]		
<# if (UseAsync) { #>
        public async Task<ActionResult> DeleteConfirmed(<#= primaryKeyShortTypeName #> id) {
<# } else { #>
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id) {
<# } #>
<# if (UseAsync) { #>
            var <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            var <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
			bool viewOf = ViewTapping(ViewStates.DeletePost, <#= ModelVariable #>);
            db.<#= entitySetName #>.Remove(<#= ModelVariable #>);
<# if (UseAsync) { #>
            await db.SaveChangesAsync();
<# } else { #>
            bool state = SaveDatabase(ViewStates.Delete, <#= ModelVariable #>);
			if (!state) {			
				AppVar.SetErrorStatus(ViewBag, DeletedError); // Failed to Save				
                return View(<#= ModelVariable #>);
			}
<# } #>			
            return RedirectToAction("Index");
        }
		#endregion

		#region Removing output cache
		public void RemoveOutputCache(string url) {
			HttpResponse.RemoveOutputCacheItem(url);
		}
        
        public void RemoveOutputCacheOnIndex() {
            var cacheManager = new OutputCacheManager();
            cacheManager.RemoveItems(ControllerName, "Index");
            cacheManager.RemoveItems(ControllerName, "List");
            RemoveOutputCache(ControllerVisibleUrl);
            RemoveOutputCache(ControllerVisibleUrl + "Index");
            cacheManager = null;
            GC.Collect();
        }
		#endregion
    }

	
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>